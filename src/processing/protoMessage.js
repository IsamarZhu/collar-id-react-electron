// source: message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck


goog.provide('proto.AckPacket');
goog.provide('proto.Activity');
goog.provide('proto.BatteryState');
goog.provide('proto.ConfigPacket');
goog.provide('proto.Packet');
goog.provide('proto.Packet.PayloadCase');
goog.provide('proto.PacketHeader');
goog.provide('proto.RadioPower');
goog.provide('proto.SDCardState');
goog.provide('proto.SimpleSensorReading');
goog.provide('proto.SystemInfoPacket');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PacketHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PacketHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PacketHeader.displayName = 'proto.PacketHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SystemInfoPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SystemInfoPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SystemInfoPacket.displayName = 'proto.SystemInfoPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConfigPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConfigPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConfigPacket.displayName = 'proto.ConfigPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BatteryState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BatteryState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BatteryState.displayName = 'proto.BatteryState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SimpleSensorReading = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SimpleSensorReading, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SimpleSensorReading.displayName = 'proto.SimpleSensorReading';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SDCardState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SDCardState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SDCardState.displayName = 'proto.SDCardState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AckPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AckPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AckPacket.displayName = 'proto.AckPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RadioPower = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RadioPower, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RadioPower.displayName = 'proto.RadioPower';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Packet.oneofGroups_);
};
goog.inherits(proto.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Packet.displayName = 'proto.Packet';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PacketHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.PacketHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PacketHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PacketHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemUid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msFromStart: jspb.Message.getFieldWithDefault(msg, 2, 0),
    epoch: jspb.Message.getFieldWithDefault(msg, 3, 0),
    packetIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    requestAck: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PacketHeader}
 */
proto.PacketHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PacketHeader;
  return proto.PacketHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PacketHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PacketHeader}
 */
proto.PacketHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsFromStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPacketIndex(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequestAck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PacketHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PacketHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PacketHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PacketHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemUid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMsFromStart();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPacketIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getRequestAck();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional uint32 system_uid = 1;
 * @return {number}
 */
proto.PacketHeader.prototype.getSystemUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PacketHeader} returns this
 */
proto.PacketHeader.prototype.setSystemUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 ms_from_start = 2;
 * @return {number}
 */
proto.PacketHeader.prototype.getMsFromStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PacketHeader} returns this
 */
proto.PacketHeader.prototype.setMsFromStart = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 epoch = 3;
 * @return {number}
 */
proto.PacketHeader.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PacketHeader} returns this
 */
proto.PacketHeader.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 packet_index = 4;
 * @return {number}
 */
proto.PacketHeader.prototype.getPacketIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PacketHeader} returns this
 */
proto.PacketHeader.prototype.setPacketIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool request_ack = 5;
 * @return {boolean}
 */
proto.PacketHeader.prototype.getRequestAck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PacketHeader} returns this
 */
proto.PacketHeader.prototype.setRequestAck = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SystemInfoPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.SystemInfoPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SystemInfoPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SystemInfoPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    simpleSensorReading: (f = msg.getSimpleSensorReading()) && proto.SimpleSensorReading.toObject(includeInstance, f),
    deviceEngaged: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    sdcardState: (f = msg.getSdcardState()) && proto.SDCardState.toObject(includeInstance, f),
    batteryState: (f = msg.getBatteryState()) && proto.BatteryState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SystemInfoPacket}
 */
proto.SystemInfoPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SystemInfoPacket;
  return proto.SystemInfoPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SystemInfoPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SystemInfoPacket}
 */
proto.SystemInfoPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SimpleSensorReading;
      reader.readMessage(value,proto.SimpleSensorReading.deserializeBinaryFromReader);
      msg.setSimpleSensorReading(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeviceEngaged(value);
      break;
    case 3:
      var value = new proto.SDCardState;
      reader.readMessage(value,proto.SDCardState.deserializeBinaryFromReader);
      msg.setSdcardState(value);
      break;
    case 5:
      var value = new proto.BatteryState;
      reader.readMessage(value,proto.BatteryState.deserializeBinaryFromReader);
      msg.setBatteryState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SystemInfoPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SystemInfoPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SystemInfoPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SystemInfoPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimpleSensorReading();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SimpleSensorReading.serializeBinaryToWriter
    );
  }
  f = message.getDeviceEngaged();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSdcardState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SDCardState.serializeBinaryToWriter
    );
  }
  f = message.getBatteryState();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.BatteryState.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleSensorReading simple_sensor_reading = 1;
 * @return {?proto.SimpleSensorReading}
 */
proto.SystemInfoPacket.prototype.getSimpleSensorReading = function() {
  return /** @type{?proto.SimpleSensorReading} */ (
    jspb.Message.getWrapperField(this, proto.SimpleSensorReading, 1));
};


/**
 * @param {?proto.SimpleSensorReading|undefined} value
 * @return {!proto.SystemInfoPacket} returns this
*/
proto.SystemInfoPacket.prototype.setSimpleSensorReading = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SystemInfoPacket} returns this
 */
proto.SystemInfoPacket.prototype.clearSimpleSensorReading = function() {
  return this.setSimpleSensorReading(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SystemInfoPacket.prototype.hasSimpleSensorReading = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool device_engaged = 2;
 * @return {boolean}
 */
proto.SystemInfoPacket.prototype.getDeviceEngaged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SystemInfoPacket} returns this
 */
proto.SystemInfoPacket.prototype.setDeviceEngaged = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional SDCardState sdcard_state = 3;
 * @return {?proto.SDCardState}
 */
proto.SystemInfoPacket.prototype.getSdcardState = function() {
  return /** @type{?proto.SDCardState} */ (
    jspb.Message.getWrapperField(this, proto.SDCardState, 3));
};


/**
 * @param {?proto.SDCardState|undefined} value
 * @return {!proto.SystemInfoPacket} returns this
*/
proto.SystemInfoPacket.prototype.setSdcardState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SystemInfoPacket} returns this
 */
proto.SystemInfoPacket.prototype.clearSdcardState = function() {
  return this.setSdcardState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SystemInfoPacket.prototype.hasSdcardState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BatteryState battery_state = 5;
 * @return {?proto.BatteryState}
 */
proto.SystemInfoPacket.prototype.getBatteryState = function() {
  return /** @type{?proto.BatteryState} */ (
    jspb.Message.getWrapperField(this, proto.BatteryState, 5));
};


/**
 * @param {?proto.BatteryState|undefined} value
 * @return {!proto.SystemInfoPacket} returns this
*/
proto.SystemInfoPacket.prototype.setBatteryState = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SystemInfoPacket} returns this
 */
proto.SystemInfoPacket.prototype.clearBatteryState = function() {
  return this.setBatteryState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SystemInfoPacket.prototype.hasBatteryState = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConfigPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.ConfigPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConfigPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    engageSystem: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    enableMicrophone: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    enableActivity: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    enableParticulate: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    enableEnvironmental: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    enableLight: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    enableMotion: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    enableLora: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConfigPacket}
 */
proto.ConfigPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConfigPacket;
  return proto.ConfigPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConfigPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConfigPacket}
 */
proto.ConfigPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEngageSystem(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableMicrophone(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableActivity(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableParticulate(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableEnvironmental(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableLight(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableMotion(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableLora(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConfigPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConfigPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConfigPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConfigPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEngageSystem();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getEnableMicrophone();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEnableActivity();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getEnableParticulate();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getEnableEnvironmental();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getEnableLight();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getEnableMotion();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getEnableLora();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional bool engage_system = 1;
 * @return {boolean}
 */
proto.ConfigPacket.prototype.getEngageSystem = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ConfigPacket} returns this
 */
proto.ConfigPacket.prototype.setEngageSystem = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool enable_microphone = 2;
 * @return {boolean}
 */
proto.ConfigPacket.prototype.getEnableMicrophone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ConfigPacket} returns this
 */
proto.ConfigPacket.prototype.setEnableMicrophone = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool enable_activity = 3;
 * @return {boolean}
 */
proto.ConfigPacket.prototype.getEnableActivity = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ConfigPacket} returns this
 */
proto.ConfigPacket.prototype.setEnableActivity = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool enable_particulate = 4;
 * @return {boolean}
 */
proto.ConfigPacket.prototype.getEnableParticulate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ConfigPacket} returns this
 */
proto.ConfigPacket.prototype.setEnableParticulate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool enable_environmental = 5;
 * @return {boolean}
 */
proto.ConfigPacket.prototype.getEnableEnvironmental = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ConfigPacket} returns this
 */
proto.ConfigPacket.prototype.setEnableEnvironmental = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool enable_light = 6;
 * @return {boolean}
 */
proto.ConfigPacket.prototype.getEnableLight = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ConfigPacket} returns this
 */
proto.ConfigPacket.prototype.setEnableLight = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool enable_motion = 7;
 * @return {boolean}
 */
proto.ConfigPacket.prototype.getEnableMotion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ConfigPacket} returns this
 */
proto.ConfigPacket.prototype.setEnableMotion = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool enable_lora = 8;
 * @return {boolean}
 */
proto.ConfigPacket.prototype.getEnableLora = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ConfigPacket} returns this
 */
proto.ConfigPacket.prototype.setEnableLora = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BatteryState.prototype.toObject = function(opt_includeInstance) {
  return proto.BatteryState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BatteryState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BatteryState.toObject = function(includeInstance, msg) {
  var f, obj = {
    charging: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    voltage: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    percentage: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BatteryState}
 */
proto.BatteryState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BatteryState;
  return proto.BatteryState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BatteryState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BatteryState}
 */
proto.BatteryState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCharging(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVoltage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BatteryState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BatteryState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BatteryState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BatteryState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharging();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getVoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional bool charging = 1;
 * @return {boolean}
 */
proto.BatteryState.prototype.getCharging = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.BatteryState} returns this
 */
proto.BatteryState.prototype.setCharging = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional float voltage = 2;
 * @return {number}
 */
proto.BatteryState.prototype.getVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BatteryState} returns this
 */
proto.BatteryState.prototype.setVoltage = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float percentage = 3;
 * @return {number}
 */
proto.BatteryState.prototype.getPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BatteryState} returns this
 */
proto.BatteryState.prototype.setPercentage = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.BatteryState} returns this
 */
proto.BatteryState.prototype.clearPercentage = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BatteryState.prototype.hasPercentage = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SimpleSensorReading.prototype.toObject = function(opt_includeInstance) {
  return proto.SimpleSensorReading.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SimpleSensorReading} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SimpleSensorReading.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0),
    temperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    humidity: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    pressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    gas: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    pm25: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    light: jspb.Message.getFieldWithDefault(msg, 8, 0),
    activity: jspb.Message.getFieldWithDefault(msg, 9, 0),
    steps: jspb.Message.getFieldWithDefault(msg, 10, 0),
    particulateStaticObstructed: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    particulateDynamicObstructed: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    particulateOutsideDetectionLimits: jspb.Message.getBooleanFieldWithDefault(msg, 13, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SimpleSensorReading}
 */
proto.SimpleSensorReading.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SimpleSensorReading;
  return proto.SimpleSensorReading.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SimpleSensorReading} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SimpleSensorReading}
 */
proto.SimpleSensorReading.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEpoch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperature(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHumidity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPressure(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGas(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPm25(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLight(value);
      break;
    case 9:
      var value = /** @type {!proto.Activity} */ (reader.readEnum());
      msg.setActivity(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSteps(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParticulateStaticObstructed(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParticulateDynamicObstructed(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParticulateOutsideDetectionLimits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SimpleSensorReading.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SimpleSensorReading.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SimpleSensorReading} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SimpleSensorReading.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getHumidity();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getGas();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getPm25();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getLight();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getActivity();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getSteps();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getParticulateStaticObstructed();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getParticulateDynamicObstructed();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getParticulateOutsideDetectionLimits();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.SimpleSensorReading.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 epoch = 2;
 * @return {number}
 */
proto.SimpleSensorReading.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float temperature = 3;
 * @return {number}
 */
proto.SimpleSensorReading.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float humidity = 4;
 * @return {number}
 */
proto.SimpleSensorReading.prototype.getHumidity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setHumidity = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float pressure = 5;
 * @return {number}
 */
proto.SimpleSensorReading.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float gas = 6;
 * @return {number}
 */
proto.SimpleSensorReading.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setGas = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float pm2_5 = 7;
 * @return {number}
 */
proto.SimpleSensorReading.prototype.getPm25 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setPm25 = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional uint32 light = 8;
 * @return {number}
 */
proto.SimpleSensorReading.prototype.getLight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setLight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional Activity activity = 9;
 * @return {!proto.Activity}
 */
proto.SimpleSensorReading.prototype.getActivity = function() {
  return /** @type {!proto.Activity} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.Activity} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setActivity = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional uint32 steps = 10;
 * @return {number}
 */
proto.SimpleSensorReading.prototype.getSteps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setSteps = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool particulate_static_obstructed = 11;
 * @return {boolean}
 */
proto.SimpleSensorReading.prototype.getParticulateStaticObstructed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setParticulateStaticObstructed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool particulate_dynamic_obstructed = 12;
 * @return {boolean}
 */
proto.SimpleSensorReading.prototype.getParticulateDynamicObstructed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setParticulateDynamicObstructed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool particulate_outside_detection_limits = 13;
 * @return {boolean}
 */
proto.SimpleSensorReading.prototype.getParticulateOutsideDetectionLimits = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SimpleSensorReading} returns this
 */
proto.SimpleSensorReading.prototype.setParticulateOutsideDetectionLimits = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SDCardState.prototype.toObject = function(opt_includeInstance) {
  return proto.SDCardState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SDCardState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SDCardState.toObject = function(includeInstance, msg) {
  var f, obj = {
    spaceRemaining: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SDCardState}
 */
proto.SDCardState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SDCardState;
  return proto.SDCardState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SDCardState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SDCardState}
 */
proto.SDCardState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSpaceRemaining(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SDCardState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SDCardState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SDCardState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SDCardState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpaceRemaining();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 space_remaining = 1;
 * @return {number}
 */
proto.SDCardState.prototype.getSpaceRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SDCardState} returns this
 */
proto.SDCardState.prototype.setSpaceRemaining = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AckPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.AckPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AckPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AckPacket.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AckPacket}
 */
proto.AckPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AckPacket;
  return proto.AckPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AckPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AckPacket}
 */
proto.AckPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AckPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AckPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AckPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AckPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RadioPower.prototype.toObject = function(opt_includeInstance) {
  return proto.RadioPower.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RadioPower} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RadioPower.toObject = function(includeInstance, msg) {
  var f, obj = {
    rssi: jspb.Message.getFieldWithDefault(msg, 1, 0),
    snr: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rssiEst: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RadioPower}
 */
proto.RadioPower.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RadioPower;
  return proto.RadioPower.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RadioPower} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RadioPower}
 */
proto.RadioPower.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssi(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSnr(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssiEst(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RadioPower.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RadioPower.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RadioPower} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RadioPower.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRssi();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSnr();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRssiEst();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 rssi = 1;
 * @return {number}
 */
proto.RadioPower.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RadioPower} returns this
 */
proto.RadioPower.prototype.setRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 snr = 2;
 * @return {number}
 */
proto.RadioPower.prototype.getSnr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.RadioPower} returns this
 */
proto.RadioPower.prototype.setSnr = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 rssi_est = 3;
 * @return {number}
 */
proto.RadioPower.prototype.getRssiEst = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.RadioPower} returns this
 */
proto.RadioPower.prototype.setRssiEst = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Packet.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.Packet.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  SYSTEM_INFO_PACKET: 2,
  CONFIG_PACKET: 3,
  ACK_PACKET: 4
};

/**
 * @return {proto.Packet.PayloadCase}
 */
proto.Packet.prototype.getPayloadCase = function() {
  return /** @type {proto.Packet.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.Packet.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.PacketHeader.toObject(includeInstance, f),
    systemInfoPacket: (f = msg.getSystemInfoPacket()) && proto.SystemInfoPacket.toObject(includeInstance, f),
    configPacket: (f = msg.getConfigPacket()) && proto.ConfigPacket.toObject(includeInstance, f),
    ackPacket: (f = msg.getAckPacket()) && proto.AckPacket.toObject(includeInstance, f),
    radiopower: (f = msg.getRadiopower()) && proto.RadioPower.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Packet}
 */
proto.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Packet;
  return proto.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Packet}
 */
proto.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PacketHeader;
      reader.readMessage(value,proto.PacketHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.SystemInfoPacket;
      reader.readMessage(value,proto.SystemInfoPacket.deserializeBinaryFromReader);
      msg.setSystemInfoPacket(value);
      break;
    case 3:
      var value = new proto.ConfigPacket;
      reader.readMessage(value,proto.ConfigPacket.deserializeBinaryFromReader);
      msg.setConfigPacket(value);
      break;
    case 4:
      var value = new proto.AckPacket;
      reader.readMessage(value,proto.AckPacket.deserializeBinaryFromReader);
      msg.setAckPacket(value);
      break;
    case 5:
      var value = new proto.RadioPower;
      reader.readMessage(value,proto.RadioPower.deserializeBinaryFromReader);
      msg.setRadiopower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PacketHeader.serializeBinaryToWriter
    );
  }
  f = message.getSystemInfoPacket();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SystemInfoPacket.serializeBinaryToWriter
    );
  }
  f = message.getConfigPacket();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ConfigPacket.serializeBinaryToWriter
    );
  }
  f = message.getAckPacket();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.AckPacket.serializeBinaryToWriter
    );
  }
  f = message.getRadiopower();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.RadioPower.serializeBinaryToWriter
    );
  }
};


/**
 * optional PacketHeader header = 1;
 * @return {?proto.PacketHeader}
 */
proto.Packet.prototype.getHeader = function() {
  return /** @type{?proto.PacketHeader} */ (
    jspb.Message.getWrapperField(this, proto.PacketHeader, 1));
};


/**
 * @param {?proto.PacketHeader|undefined} value
 * @return {!proto.Packet} returns this
*/
proto.Packet.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SystemInfoPacket system_info_packet = 2;
 * @return {?proto.SystemInfoPacket}
 */
proto.Packet.prototype.getSystemInfoPacket = function() {
  return /** @type{?proto.SystemInfoPacket} */ (
    jspb.Message.getWrapperField(this, proto.SystemInfoPacket, 2));
};


/**
 * @param {?proto.SystemInfoPacket|undefined} value
 * @return {!proto.Packet} returns this
*/
proto.Packet.prototype.setSystemInfoPacket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearSystemInfoPacket = function() {
  return this.setSystemInfoPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasSystemInfoPacket = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConfigPacket config_packet = 3;
 * @return {?proto.ConfigPacket}
 */
proto.Packet.prototype.getConfigPacket = function() {
  return /** @type{?proto.ConfigPacket} */ (
    jspb.Message.getWrapperField(this, proto.ConfigPacket, 3));
};


/**
 * @param {?proto.ConfigPacket|undefined} value
 * @return {!proto.Packet} returns this
*/
proto.Packet.prototype.setConfigPacket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearConfigPacket = function() {
  return this.setConfigPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasConfigPacket = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AckPacket ack_packet = 4;
 * @return {?proto.AckPacket}
 */
proto.Packet.prototype.getAckPacket = function() {
  return /** @type{?proto.AckPacket} */ (
    jspb.Message.getWrapperField(this, proto.AckPacket, 4));
};


/**
 * @param {?proto.AckPacket|undefined} value
 * @return {!proto.Packet} returns this
*/
proto.Packet.prototype.setAckPacket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.Packet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearAckPacket = function() {
  return this.setAckPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasAckPacket = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RadioPower radioPower = 5;
 * @return {?proto.RadioPower}
 */
proto.Packet.prototype.getRadiopower = function() {
  return /** @type{?proto.RadioPower} */ (
    jspb.Message.getWrapperField(this, proto.RadioPower, 5));
};


/**
 * @param {?proto.RadioPower|undefined} value
 * @return {!proto.Packet} returns this
*/
proto.Packet.prototype.setRadiopower = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearRadiopower = function() {
  return this.setRadiopower(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasRadiopower = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.Activity = {
  STILL: 0,
  WALK: 1,
  RUN: 2
};
